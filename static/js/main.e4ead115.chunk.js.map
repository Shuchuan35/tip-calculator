{"version":3,"sources":["components/Bill.js","components/Tip.js","components/NumberOfPeople.js","components/BillTotal.js","App.js","serviceWorker.js","index.js"],"names":["Bill","_ref","onBillChange","react_default","a","createElement","className","type","placeholder","name","onChange","Tip","tip","onTipChange","min","value","NumberOfPeople","numberOfPeople","onNumberOfPeopleChange","BillTotal","billTotal","isSplit","App","state","bill","e","_this","setState","target","num","_this$state","this","tipAmount","Number","parseFloat","parseInt","isBillSplit","toFixed","components_Bill","components_Tip","components_NumberOfPeople","components_BillTotal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e4ead115.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Bill = ({onBillChange}) => {\r\n    return (\r\n        <div>\r\n            <p><small>Bill:</small></p>\r\n            <input \r\n                className='center'\r\n                type='search' \r\n                placeholder='enter bill $amount'\r\n                name='search'\r\n                onChange={onBillChange}\r\n                >\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bill;","import React from 'react';\r\n\r\nconst Tip = ({ tip, onTipChange }) => (\r\n    <div>\r\n        <input\r\n            className='center'\r\n            type='number'\r\n            min='0'\r\n            placeholder='tip %'\r\n            name='tip'\r\n            value={tip}\r\n            onChange={onTipChange}\r\n        >\r\n        </input>\r\n    </div>\r\n);\r\n\r\nexport default Tip;","import React from 'react';\r\n\r\nconst NumberOfPeople = ({ numberOfPeople, onNumberOfPeopleChange }) => (\r\n    <input\r\n        className='center'\r\n        type='number'\r\n        min='1'\r\n        placeholder='Number of People'\r\n        name='numberOfPeople'\r\n        value={numberOfPeople}\r\n        onChange={onNumberOfPeopleChange}\r\n    >\r\n    </input>\r\n);\r\n\r\nexport default NumberOfPeople;","import React from 'react';\r\n\r\nconst BillTotal = ({ tip, billTotal, isSplit }) => {\r\n    if (!isSplit) {\r\n        return (\r\n            < div >\r\n                <p>Tip: ${tip}</p>\r\n                <p>Total: ${billTotal}</p>\r\n            </div >\r\n        )\r\n    } else {\r\n        return (\r\n            < div >\r\n                <p>Tip <small>per person</small>: ${tip}</p>\r\n                <p>Total <small>per person</small>: ${billTotal}</p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default BillTotal;","import React, { Component } from 'react';\nimport Bill from './components/Bill';\nimport Tip from './components/Tip';\nimport NumberOfPeoplle from './components/NumberOfPeople';\nimport BillTotal from './components/BillTotal';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    bill: 0,\n    tip: 15,\n    numberOfPeople: 1,\n    isSplit: false\n  }\n\n  onBillChange = e => {\n    // console.log(e.target.value);\n    this.setState({ bill: e.target.value });\n    // console.log(this.state.bill);\n  }\n\n  onTipChange = e => {\n    this.setState({ tip: e.target.value });\n  }\n\n  onNumberOfPeopleChange = e => {\n    const num = e.target.value <= 1 ? 1 : e.target.value;\n\n    this.setState({ \n      numberOfPeople: num, \n      isSplit: num === 1 ? false : true\n    });\n    // console.log(this.state.isSplit);\n  }\n\n  render() {\n    const { bill, tip, numberOfPeople } = this.state;\n    // const tipAmount = Number.parseFloat(this.state.bill) * Number.parseInt(this.state.tip) / 100;\n    // const tip = numberOfPeople === 1 ? tipAmount.toFixed(2) : (tipAmount / Number.parseInt(numberOfPeople)).toFixed(2);\n    // const billTotal = Number.parseFloat(this.state.bill) + Number.parseFloat(tipAmount);\n    // const bill = numberOfPeople === 1 ? billTotal.toFixed(2) : (billTotal / Number.parseInt(numberOfPeople)).toFixed(2);\n    let tipAmount = Number.parseFloat(bill) * Number.parseInt(tip) / 100;\n    let billTotal = Number.parseFloat(bill) + Number.parseFloat(tipAmount);\n    let isBillSplit = false;\n    // console.log(numberOfPeople);\n    if (numberOfPeople !== 1) {\n      tipAmount = (tipAmount / Number.parseInt(numberOfPeople)).toFixed(2);\n      billTotal = (billTotal / Number.parseInt(numberOfPeople)).toFixed(2);\n      isBillSplit = true;\n    }\n\n    return (\n      <div className=\"App\">\n        <h2>Tip Calculator</h2>\n        <Bill\n          onBillChange={this.onBillChange}\n        />\n        <Tip\n          tip={tip}\n          onTipChange={this.onTipChange}\n        />\n        <NumberOfPeoplle\n          numberOfPeople={numberOfPeople}\n          onNumberOfPeopleChange={this.onNumberOfPeopleChange}\n        />\n        <BillTotal\n          tip={tipAmount}\n          isSplit={isBillSplit}\n          billTotal={billTotal}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}