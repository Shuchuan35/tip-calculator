{"version":3,"sources":["components/BillBox.js","components/Tip.js","components/NumberOfPeople.js","components/BillTotal.js","App.js","serviceWorker.js","index.js"],"names":["InputBox","_ref","onBillChange","react_default","a","createElement","type","placeholder","name","onChange","Tip","tip","onTipChange","value","NumberOfPeople","people","onNumberOfPeopleChange","min","BillTotal","billTotal","numberOfPeople","App","state","bill","e","_this","setState","target","num","this","tipAmount","Number","parseFloat","parseInt","toFixed","className","BillBox","components_Tip","components_NumberOfPeople","components_BillTotal","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAgBeA,EAdE,SAAAC,GAAoB,IAAlBC,EAAkBD,EAAlBC,aACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACIC,KAAK,SACLC,YAAY,qBACZC,KAAK,SACLC,SAAUP,MCMXQ,EAbH,SAAAT,GAAA,IAAEU,EAAFV,EAAEU,IAAKC,EAAPX,EAAOW,YAAP,OACRT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SACQC,KAAK,OACLC,YAAY,QACZC,KAAK,MACLK,MAAOF,EACPF,SAAUG,MCKXE,EAZQ,SAAAb,GAAA,IAAEc,EAAFd,EAAEc,OAAQC,EAAVf,EAAUe,uBAAV,OACnBb,EAAAC,EAAAC,cAAA,SACIC,KAAK,SACLW,IAAI,IACJV,YAAY,mBACZC,KAAK,iBACLK,MAAOE,EACPN,SAAUO,KCWHE,EAlBG,SAAAjB,GAAwC,IAArCU,EAAqCV,EAArCU,IAAKQ,EAAgClB,EAAhCkB,UACtB,OAAuB,IAD+BlB,EAArBmB,eAGzBjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iBAASM,GACTR,EAAAC,EAAAC,cAAA,mBAAWc,IAKfhB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,4BAAoBM,GACpBR,EAAAC,EAAAC,cAAA,8BAAsBc,KC4CvBE,6MAlDbC,MAAQ,CACNC,KAAM,EACNZ,IAAK,GACLS,eAAgB,KAGlBlB,aAAe,SAAAsB,GAEbC,EAAKC,SAAS,CAAEH,KAAMC,EAAEG,OAAOd,WAIjCD,YAAc,SAAAY,GACZC,EAAKC,SAAS,CAAEf,IAAKa,EAAEG,OAAOd,WAGhCG,uBAAyB,SAAAQ,GACvB,IAAMI,EAAMJ,EAAEG,OAAOd,MAAQ,EAAI,EAAIW,EAAEG,OAAOd,MAC9CY,EAAKC,SAAS,CAAEN,eAAgBQ,6EAGzB,IACCR,EAAmBS,KAAKP,MAAxBF,eACFU,EAAYC,OAAOC,WAAWH,KAAKP,MAAMC,MAAQQ,OAAOE,SAASJ,KAAKP,MAAMX,KAAO,IACnFA,EAAyB,IAAnBS,EAAuBU,EAAUI,QAAQ,IAAMJ,EAAYC,OAAOE,SAASb,IAAiBc,QAAQ,GAC1Gf,EAAYY,OAAOC,WAAWH,KAAKP,MAAMC,MAAQQ,OAAOC,WAAWF,GACnEP,EAA0B,IAAnBH,EAAuBD,EAAUe,QAAQ,IAAMf,EAAUY,OAAOE,SAASb,IAAiBc,QAAQ,GAE/G,OACE/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,OACbhC,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAC+B,EAAD,CAASlC,aAAc2B,KAAK3B,eAC5BC,EAAAC,EAAAC,cAACgC,EAAD,CACE1B,IAAKkB,KAAKP,MAAMX,IAChBC,YAAaiB,KAAKjB,cAEpBT,EAAAC,EAAAC,cAACiC,EAAD,CACEvB,OAAQK,EACRJ,uBAAwBa,KAAKb,yBAE/Bb,EAAAC,EAAAC,cAACkC,EAAD,CACE5B,IAAKA,EACLS,eAAgBA,EAChBD,UAAWI,YA5CHiB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5dcdeb9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst InputBox = ({onBillChange}) => {\r\n    return (\r\n        <div>\r\n            <input \r\n                type='search' \r\n                placeholder='enter bill $amount'\r\n                name='search'\r\n                onChange={onBillChange}\r\n                >\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputBox;","import React from 'react';\r\n\r\nconst Tip = ({tip, onTipChange}) => (\r\n    <div>\r\n        <input \r\n                type='text' \r\n                placeholder='tip %'\r\n                name='tip'\r\n                value={tip}\r\n                onChange={onTipChange}\r\n                >\r\n            </input>\r\n    </div>\r\n);\r\n\r\nexport default Tip;","import React from 'react';\r\n\r\nconst NumberOfPeople = ({people, onNumberOfPeopleChange}) => (\r\n    <input\r\n        type='number'\r\n        min='1'\r\n        placeholder='Number of People'\r\n        name='NumberOfPeople'\r\n        value={people}\r\n        onChange={onNumberOfPeopleChange}\r\n    >\r\n    </input>\r\n);\r\n\r\nexport default NumberOfPeople;","import React from 'react';\r\n\r\nconst BillTotal = ({ tip, billTotal, numberOfPeople }) => {\r\n    if (numberOfPeople === 1) {\r\n        return (\r\n            < div >\r\n                <p>Tip: {tip}</p>\r\n                <p>Total: {billTotal}</p>\r\n            </div >\r\n        )\r\n    } else {\r\n        return (\r\n            < div >\r\n                <p>Tip per person: {tip}</p>\r\n                <p>Total per person: {billTotal}</p>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default BillTotal;","import React, { Component } from 'react';\nimport BillBox from './components/BillBox';\nimport Tip from './components/Tip';\nimport NumberOfPeoplle from './components/NumberOfPeople';\nimport BillTotal from './components/BillTotal';\n// import './App.css';\n\nclass App extends Component {\n  state = {\n    bill: 0,\n    tip: 15,\n    numberOfPeople: 1\n  }\n\n  onBillChange = e => {\n    // console.log(e.target.value);\n    this.setState({ bill: e.target.value });\n    // console.log(this.state.bill);\n  }\n\n  onTipChange = e => {\n    this.setState({ tip: e.target.value });\n  }\n\n  onNumberOfPeopleChange = e => {\n    const num = e.target.value < 1 ? 1 : e.target.value;\n    this.setState({ numberOfPeople: num });\n  }\n\n  render() {\n    const { numberOfPeople } = this.state;\n    const tipAmount = Number.parseFloat(this.state.bill) * Number.parseInt(this.state.tip) / 100;\n    const tip = numberOfPeople === 1 ? tipAmount.toFixed(2) : (tipAmount / Number.parseInt(numberOfPeople)).toFixed(2);\n    const billTotal = Number.parseFloat(this.state.bill) + Number.parseFloat(tipAmount);\n    const bill = numberOfPeople === 1 ? billTotal.toFixed(2) : (billTotal/Number.parseInt(numberOfPeople)).toFixed(2);\n    // console.log(billTotal);\n    return (\n      <div className=\"App\">\n        <h1>Tip Calculator</h1>\n        <BillBox onBillChange={this.onBillChange} />\n        <Tip\n          tip={this.state.tip} \n          onTipChange={this.onTipChange}\n        />\n        <NumberOfPeoplle\n          people={numberOfPeople}\n          onNumberOfPeopleChange={this.onNumberOfPeopleChange}\n        />\n        <BillTotal\n          tip={tip}\n          numberOfPeople={numberOfPeople}\n          billTotal={bill}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}